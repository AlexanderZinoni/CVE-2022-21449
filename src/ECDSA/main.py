import mod_ECDSA as ECDSA
import Modular_ECIES as ECIES
import ecc_tools_modular as ecc
import Curves
import Vulnerable_ECDSA as VECDSA


def blank_line():
    print('')


# Choosing a curve
curve = Curves.secp256k1()

# Generate my key pair
my_private_key, my_public_key = ecc.generate_key_pair(curve)

blank_line()
print("My public key: x :", my_public_key[0])
print("               y :", my_public_key[1])
print("My private key: ", my_private_key)
blank_line()

# Write a message to myself :)
message = '''
Globalisation is the process by which the world is becoming 
increasingly interconnected as a result of a massive increase 
in trade and cultural exchange. This process manifests itself
through the increasing flows of money across national boundaries
such as FDIs and the development of global products. Many 
reasons can be given to say that the EU is a global power,
especially thanks to the influence it has on the world. Also,
it plays a key role in world trade as it removes barriers 
between member states and tries to encourage trade with non 
member countries. 
'''

# Encrypt the message with ECIES
encrypted_message = ECIES.encrypt(my_public_key, curve, message)
print("Encrypted message: ")
print(encrypted_message[2])
blank_line()

# Sign the encrypted message with ECDSA
signature = ECDSA.sign(str(encrypted_message[2]), curve, my_private_key)
print("Signature: ")
print("          - r: ", signature[0])
print("          - s: ", signature[1])

# Sending message to myself
# ...
# Received!

# Verify the signature with ECDSA
falsification = ''  # You can try appending to the message but it will reject the signatur
is_original = ECDSA.verify(str(encrypted_message[2]) + falsification, curve, my_public_key, signature)
print("Is the message authentic : ", is_original)
blank_line()

# Decrypt the message from ECIES
recovered_message = ECIES.decrypt(my_private_key, curve, encrypted_message)
print("Message: ")
print(recovered_message)

# Exploiting Vulnerable_ECDSA with signature pair (0, 0), (0, k*order).(k integer)
bool = VECDSA.ECDSA_verify(str(encrypted_message[2]), curve, my_public_key, 0, curve[4])
blank_line()
print('works with s, r = 0, 0 ? : ', bool)
