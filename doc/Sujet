Vulnérabilité d'une implémentation de ECDSA dans Java
Encadrant : Jean-Marc Talbot (jean-marc.talbot@lis-lab.fr)
Contexte :
En avril 2022, Oracle annonce une vulnérabilité (identifiée par CVE-2022-21449) dans la librairie security et plus particulièrement dans l'algorithme de signature digitale ECDSA, vulnérabilité entachant les versions de Java allant de 11 à 17 (Java 11 est sorti en septembre 2018). La mitigation proposée par Oracle est la mise à jour de Java par migration vers la version 18.

Cette vulnérabilité affecte un mécanisme de signature digitale largement utilisé sur le web et notamment sur la blockchain Bitcoin. Il ne s'agit pas d'une faiblesse de la technique de cryptographie utilisée mais bien d'un bug dans l'implémentation d'un algorithme cryptographique.

ECDSA est un algorithme de signature digitale. De manière très schématique, il s'agit de calculer à l'aide d'outils cryptographiques un nombre (en réalité un certain nombre de bits) à partir du document à signer, nombre qui sera ajouté au document. Ce nombre sera donc la signature du document et permettra de garantir sa non-altération. De plus, si dans ce calcul, on incorpore un secret connu seulement de l'émetteur du message alors on aura de plus une authentification de l'émetteur du message.

Cette approche sous-entend que le récepteur du document aurait également besoin du secret pour pouvoir effectivement authentifier le document (on serait alors dans un principe de cryptographie à clé symétrique). Mais, s'il connait le secret, il serait alors capable de signer lui aussi des documents en se faisant passer pour l'émetteur. Tout ceci ne serait pas très sûr.

La signature digitale repose donc sur un autre principe de cryptographie, la cryptographie à clé privée. Il n'y aura plus une seule clé mais deux clés, l'une privée et maintenue secrète par l'émetteur et l'autre publique, connue de tous et en particulier, du récepteur du document. La clé privée sera utilisée pour signer le message et la clé publique (duale en un certain sens) pour l'authentifier.

La robustesse de l'approche tient sur plusieurs hypothèses :

la connaissance de la clé publique, d'un message avec sa signature ne permet pas de retrouver la clé privée de signature.
il est impossible à partir d'un document et de sa signature de produire un document différent mais possédant la même signature.
Il convient ici de noter que ces impossibilités sont de l'ordre du calculatoire : retrouver ces informations nécessiterait des années de calcul informatique.
Il existe plusieurs techniques mathémathiques pour la cryptographie à clé privée. Une très connue se base sur la difficulté de factoriser des grands nombres en facteurs premiers; c'est le principe de RSA. Une autre plus récente se base sur les courbes elliptiques. C'est sur cette technique que se base ECDSA.

Comme évoqué plus haut, la vulnéralibité ne provient pas de la cryptographie par courbe elliptique mais de l'implantation de l'algorithme. Cette vulnérabilité est assez sévère puisqu'exploitée elle permet de contourner totalement le mécanisme de signature autant dans son aspect intégrité du document que dans celui de l'authentification de l'émetteur.

Objectifs du stage :
Ce stage comprend plusieurs étapes, chacune servant d'objectif intermédiaire.
Il s'agira dans un premier temps de s'initier à la crytographie asymétrique (dite à clé publique) et notamment celle basée sur les courbes elliptiques.
Dans un second temps, il s'agira de voir comment la cryptographie à base de courbes elliptiques peut être utilisée comme mécanisme de signature digitale et d'étudier le fonctionnement de l'algorithme ECDSA basée sur cette technologie
Enfin, il s'agira d'étudier la version erronée de ECDSA implantée dans Java 11-17; On s'intéressera particulièrement à comprendre comment cette mauvaise implantation mène à une vulnérabilité et comment celle-ci peut être exploitée.
(En bonus, si le temps le permet) Il ne s'agit pas là de la première vulnérabilité identifiée dans l'implantation de ECDSA. On pourra ainsi remonter le temps et en identifier d'autres (notamment dans d'autres langages de programmation).
